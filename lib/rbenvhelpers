#!/usr/bin/env bash

UNDERLINE=`tput smul`
NOUNDERLINE=`tput rmul`
MY_RBENV_ROOT=`rbenv root`

function execute_command_and_restore_directory() {
  COMMANDS=$*

  pushd . > /dev/null
  ${COMMANDS}
  popd > /dev/null
}

#Function to run bundle install.
#Returns 1 if bundler not installed.
#Returns 2 if Gemfile path does not lead to a file.
#Else returns the return value of bundle install.
function bundle_install() {
  PATH_TO_BUNDLE_FILE=$1
  
  if [ bundler_exists != 0 ]; then
    echo $stderr "Bundler is not installed. Cannot run bundle install."
    return 1
  fi

  if [ ! -f ${PATH_TO_BUNDLE_FILE} ]; then
    echo $stderr "${PATH_TO_BUNDLE_FILE} is not a file. Cannot run bundle installw."
    return 2
  fi

  `bundle install ${PATH_TO_BUNDLE_FILE}`
  return $?
}

function build_bundler_line() {
  GEM=$1

  NAME=`discover_gem_name_from_ls $GEM`
  VERSION=`discover_gem_version_from_ls $GEM`
  echo "gem '$NAME', ~> '$VERSION'"
  
  return 0
}
#Returns 0 if bundler exists.
#Returns 1 if bundler does not exist.
function bundler_exists() {
  `gem which bundler > /dev/null 2>&1`
  return $?
}

#Echos gem name when it has matched.
#Returns 0 for success.
function discover_gem_name_from_ls() {
  GEM_NAME=$1

  #The Gem names are generally of the format
  #foo-gem-1.2.3
  #Sometimes they are of the form:
  #foo-gem
  #Do a quick match. If there's no digits, just return the file name.
  if ! [[ $GEM_NAME =~ .*-[[:digit:]].* ]]; then
    echo $GEM_NAME
    return 0
  fi

  #From the rear of the GEM_NAME, parse everything after the final -
  NAME=${GEM_NAME%\-*}

  echo "$NAME"
  return 0
}

function discover_gem_version_from_ls() {
  GEM_NAME=$1

  #From the rear of the GEM_NAME, parse everything after the final -
  VERSION=${GEM_NAME##*\-}

  echo "$VERSION"
  return 0
}

function update_git_repository() {
  GIT_REPOSITORY=$1

  cd ${GIT_REPOSITORY}

  git pull
}